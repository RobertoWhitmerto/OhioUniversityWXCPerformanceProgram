doctype html
html
  head
    title PPA - Coaches/Trainers
    // Compiled and minified CSS
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.96.0/css/materialize.min.css')
    // Compiled and minified JavaScript
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.96.0/js/materialize.min.js')
    // Bootstrap
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')
    // Let browser know website is optimized for mobile
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    // Import Google Icon Font
    link(href='https://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    // Import materialize.css
    link(type='text/css', rel='stylesheet', href='css/materialize.min.css', media='screen,projection')

    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    // Load the AJAX API
    script(type='text/javascript', src='https://www.gstatic.com/charts/loader.js')
    script(type='text/javascript').
    
    script(type='text/javascript').
      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});
      // Set a callback to run when the Google Visualization API is loaded [A].
      google.charts.setOnLoadCallback(sleepy);
      google.charts.setOnLoadCallback(dist);
      google.charts.setOnLoadCallback(tload_time);
      google.charts.setOnLoadCallback(wellness);
      //Identifying Functions [B]
      //Initializing global variables
      var exclude = [];
    
      // ****************************** SLEEP CHART *************************************
      function sleepy() {
     // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'hours');
      //data.addColumn('number', 'Acute:Chronic Ratio');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var x = !{data_x};
      var d = [];
      
      var currentathlete = window.currentuid;
      //console.log(currentathlete);
      
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        //console.log(obj);
      }
        
        
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        if(obj.username == currentathlete) {
          //console.log(obj);
          d.push(obj);
        }
      }
      
      for(var i=0; i<d.length; i++) {
        var obj = d[i];
        //console.log(obj);
        }
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      //var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
      //            [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
      //            [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],
                  [oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],
                  [oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          //console.log("DATE: ");
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;
          //console.log(obj.date);
          
          //console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            
            //console.log(slot);
            //console.log(dt.getDate() + 1);
            rows[slot][1] = parseInt(obj.sleep, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          //console.log("K: " + k.getDate());
          if(slot < 0)
            slot = slot * (-1);
          //console.log("SLOT: " + slot);
          var rolling_total_chronic=0;
          var rolling_total_acute=0;
          var avg_count=0;
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            var chronic_dt = new Date(k);
            chronic_dt.setDate(chronic_dt.getDate() - 28);
            if(wrk_dt > chronic_dt && wrk_dt < k){
              rolling_total_chronic += parseInt(wrk.sleep, 10);
              avg_count++;
            }
            var acute_dt = new Date(k);
            acute_dt.setDate(acute_dt.getDate() - 7);
            if(wrk_dt > acute_dt && wrk_dt < k){
              rolling_total_acute += parseInt(wrk.sleep, 10);
            }
          }
          //console.log("COUNT:" + avg_count);
          rolling_total_chronic /= 28;
          rolling_total_acute /= 7;
          //console.log("chronic rolling average for sleep: ");
          //console.log(rolling_total_chronic);
          //console.log("acute rolling average for sleep: ");
          //console.log(rolling_total_acute);
           var k_day = new Date();
           k_day.setDate(k.getDate() + 1);
           rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          //rows[slot][2] = rolling_total_acute / rolling_total_chronic;
          slot++;
      }
      //console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Sleep Pattern',
      'width':500,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      hAxis: { title: "Date" },
      vAxis: {
      title: "Hours",
      viewWindowMode:'explicit'
      },
      colors: ['#006400','#32cd32']
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('sleepchart'));
      chart.draw(data, options);
      }
      
      //************************** DISTANCE CHART *********************************************
      function dist() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Distance (miles)');
      //data.addColumn('number', 'Chronic Distance');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var x = !{data_x};
      var d = [];
      
      var currentathlete = window.currentuid;
      //console.log(currentathlete);
      
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        //console.log(obj);
      }
        
        
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        if(obj.username == currentathlete) {
          //console.log(obj);
          d.push(obj);
        }
      }
      
      for(var i=0; i<d.length; i++) {
        var obj = d[i];
        //console.log(obj);
        }
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      //var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
      //            [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
      //            [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],
                  [oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],
                  [oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          //console.log("DATE: ");
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;
          //console.log(obj.date);
          
          //console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            var rolling_total=0;
            var avg_count=0;
            
            //console.log("COUNT:" + avg_count);
            rolling_total /= avg_count;
            //console.log("rolling average for sleep: ");
            //console.log(rolling_total);
            //console.log(slot);
            //console.log(dt.getDate() + 1);
            rows[slot][1] += parseInt(obj.distance, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
        //console.log("K: " + k.getDate());
        if(slot < 0)
          slot = slot * (-1);
        //console.log("SLOT: " + slot);
        var rolling_total=0;
        var avg_count=0;
        for(var j = 0; j < d.length; j++){
          var wrk = d[j];
          var wrk_dt = new Date(Date.parse(wrk.date));
          if(wrk_dt > oneMonthAgo && wrk_dt < k){
            rolling_total += parseInt(wrk.distance, 10);
            avg_count++;
          }
        }
        //console.log("COUNT:" + avg_count);
        rolling_total /= 28;
        //console.log("rolling average for dist: ");
        //console.log(rolling_total);
        var k_day = new Date();
        k_day.setDate(k.getDate() + 1);
        rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
        //rows[slot][2] = rolling_total;
        slot++;
      }
      //console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {
      'width':500,
      'height':200,
      hAxis: { title: "Date"},
      vAxis: { title: "Miles",
      viewWindowMode:'explicit'
      },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400','#32cd32'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart2 = new google.visualization.LineChart(document.getElementById('distancechart'));
      chart2.draw(data, options);
      }
      
      // ************************* TRAINING LOAD TIME CHART ******************************************
      function tload_time() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Load');
      data.addColumn('number', 'Acute:Chronic Ratio');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var x = !{data_x};
      var d = [];
      
      var currentathlete = window.currentuid;
      //console.log(currentathlete);
      
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        //console.log(obj);
      }
        
        
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        if(obj.username == currentathlete) {
          //console.log(obj);
          d.push(obj);
        }
      }
      
      for(var i=0; i<d.length; i++) {
        var obj = d[i];
        //console.log(obj);
        }
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
                  [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
                  [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          //console.log("DATE: ");
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;
          //console.log(obj.date);
          
          //console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate() + 1;
            if(slot < 0)
              slot = slot * (-1);
            
            //console.log(slot);
            //console.log(dt.getDate() + 1);
            rows[slot][1] += parseInt(obj.RPE, 10)*parseInt(obj.time, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          //console.log("K: " + k.getDate());
          if(slot < 0)
            slot = slot * (-1);
          //console.log("SLOT: " + slot);
          var rolling_total_chronic=0;
          var rolling_total_acute=0;
          var avg_count_a=0;
          var avg_count_c=0;
          
          var acute_dt = new Date(k);
          acute_dt.setDate(acute_dt.getDate() - 7);
          var chronic_dt = new Date(k);
          chronic_dt.setDate(chronic_dt.getDate() - 28);
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            var k_plus_one = new Date(k);
            k_plus_one.setDate(k_plus_one.getDate() + 1);
            //console.log("wrk_dt: " + wrk_dt + " | acute_dt: " + acute_dt + " | chronic_dt: " + chronic_dt);
            if(wrk_dt > chronic_dt && wrk_dt <= k_plus_one){
              rolling_total_chronic += parseInt(wrk.RPE, 10)*parseInt(wrk.time, 10);
              avg_count_c++;
              //console.log(wrk_dt + "is in Chronic ratio");
            }
            if(wrk_dt > acute_dt && wrk_dt <= k_plus_one){
               rolling_total_acute += parseInt(wrk.RPE, 10)*parseInt(wrk.time, 10);
               //console.log(wrk_dt + "is in Acute ratio");
              }
            }
          //console.log("COUNT:" + avg_count_c);
          rolling_total_chronic /= 28;
          rolling_total_acute /= 7;
          //console.log("chronic rolling average for tload_time: ");
          //console.log(rolling_total_chronic);
          //console.log("acute rolling average for tload_time: ");
          //console.log(rolling_total_acute);
          //console.log("ratio for" + k + ": " + (rolling_total_acute / rolling_total_chronic));
          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          rows[slot][2] = rolling_total_acute / rolling_total_chronic;
          slot++;
      }
      //console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {
      'width':500,
      'height':200,
      seriesType: 'bars',
      series: {1: {type: 'line', targetAxisIndex:1}},
      hAxis: {title: "Date"},
      vAxes: {0: {viewWindowMode:'explicit', title: 'RPE x Mins', textPosition: 'in'},
              1: {gridlines: {color: 'transparent'}, title: 'Acute:Chronic Workload'},
              },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400','#32cd32'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.ComboChart(document.getElementById('rpextimechart'));
      chart.draw(data, options);
      }
      
      //*********************** WELLNESS CHART *******************************
      function wellness() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Wellness score');
      //data.addColumn('number', 'Chronic Wellness');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var x = !{data_x};
      var d = [];
      
      var currentathlete = window.currentuid;
      //console.log(currentathlete);
      
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        //console.log(obj);
      }
        
        
      for(var i=0; i<x.length; i++) {
        var obj = x[i];
        if(obj.username == currentathlete) {
          //console.log(obj);
          d.push(obj);
        }
      }
      
      for(var i=0; i<d.length; i++) {
        var obj = d[i];
        //console.log(obj);
        }
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      //var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
      //            [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
      //            [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],
                  [oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],
                  [oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          //console.log("DATE: ");
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;
          //console.log(obj.date);
          
          //console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            var rolling_total=0;
            var avg_count=0;
            
            //console.log("COUNT:" + avg_count);
            rolling_total /= avg_count;
            //console.log("rolling average for sleep: ");
            //console.log(rolling_total);
            //console.log(slot);
            //console.log(dt.getDate() + 1);
            rows[slot][1] += parseInt(obj.percent_health, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          //console.log("K: " + k.getDate());
          if(slot < 0)
            slot = slot * (-1);
          //console.log("SLOT: " + slot);
          var rolling_total=0;
          var avg_count=0;
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            if(wrk_dt > oneMonthAgo && wrk_dt < k){
              rolling_total += parseInt(wrk.percent_health, 10);
              avg_count++;
            }
          }
          //console.log("COUNT:" + avg_count);
          rolling_total /= 28;
          //console.log("rolling average for sleep: ");
          //console.log(rolling_total);
          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          //rows[slot][2] = rolling_total;
          slot++;
      }
      //console.log("ROWS");
      //console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Wellness',
      'width':500,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      hAxis: {title: 'Date'},
      vAxis: {
      title: "% of Full Health",
      viewWindowMode:'explicit'
      },
      colors: ['#006400'],
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('wellnesschart'));
      chart.draw(data, options);
      }

  script.
    $(document).ready(function(){
    $(".dropdown-button").dropdown();
    $(".button-collapse").sideNav();
    });
    
  body(background='/views/bg3.png')
    include navi.pug
    br
    br
    style(type='text/css').
      div.ez{
      background: #b1f6cb;
      width:900px;
      border: 3px solid #000000;
      margin: auto;
      }
    style(type='text/css').
      div.ez2{
      background: #2f4f4f;
      width:525px;
      border: 3px solid #000000;
      margin: auto;
      }
    style(type='text/css').
      div.ez3{
      background: #b1f6cb;
      width:775px;
      border: 3px solid #000000;
      margin: auto;
      }
    style.
      .table {
      border: 3.5px solid #000000;
      border-radius: 5px;
      background: #2f4f4f;
      }
      .table-bordered > thead > tr > th,
      .table-bordered > tbody > tr > th,
      .table-bordered > tfoot > tr > th,
      .table-bordered > thead > tr > td,
      .table-bordered > tbody > tr > td,
      .table-bordered > tfoot > tr > td {
      border: 3px solid #000000;
      border-radius: 5px;
      }
      h1{
      color:white;
      }
      td{
      color:#00cdcd;
      }
      th{
      color:white;
      }
    style.
      .table2 {
      border: 3.5px solid #000000;
      border-radius: 5px;
      background: #2f4f4f;
      width: 770px;
      }
      .table-bordered > thead > tr > th,
      .table-bordered > tbody > tr > th,
      .table-bordered > tfoot > tr > th,
      .table-bordered > thead > tr > td,
      .table-bordered > tbody > tr > td,
      .table-bordered > tfoot > tr > td {
      border: 3px solid #000000;
      border-radius: 5px;
      }
      h1{
      color:white;
      }
      td{
      color:#00cdcd;
      }
      th{
      color:white;
      }
    br
    br
    br
    br
    br
    body
    font(color='cyan')
      .container
        .row
          .col.s13.m13
            .card.teal.darken-3
              .card-content.white-text
                span.card-title
                  center Coaches View Athletes
                    .ez
                      br
                      - if (typeof(team) !== 'undefined'){
                      li.btn.btn-info.teal(href='#viewathletes', data-toggle='collapse') View Team - !{team}
                      -}
                      br
                      br
                      #viewathletes.collapse
                        #showathletes
                        - if (typeof(data_u) !== 'undefined'){
                        table.table.table-bordered
                          thead
                            tr
                              th Username
                              th First
                              th Last
                              th
                              th
                          tbody
                            for user in data_u
                              tr
                                form(action='/coaches', method='post')
                                  input(type='hidden', value=user['username'], name='username', required='')
                                  td.utag= user['username']
                                  td.ftag= user['first']
                                  td.ltag= user['last']
                                  td
                                    center
                                      // Button trigger modal
                                      button.btn.teal.btn-primary.btn-lg(type='button', data-toggle='modal', data-target='#editModal',id='uid', value=user['username'])
                                        | View Charts
                                  td
                                    center
                                      button.btn.teal.btn-primary.btn-lg(type='button', data-toggle='modal',data-target='#editModal_tl',id='uid',value=user['username'])
                                        | Training Log
                        br
                        br
                        -}
    script.
     $('[id*=uid]').click(function(){
        currentuid=this.value;
        //console.log(this.value);
        sleepy();
        dist();
        tload_time();
        wellness();
        
        var table = document.getElementById("tl_table");
        //console.log(table);
        
        var tablebody = table.getElementsByTagName("tbody")[0];
        //console.log(tablebody);
        
        var tablerows = tablebody.getElementsByTagName("TR");
        //console.log(tablerows);
        
        //if exclude[] is already populated, reset the data/table.
        if(exclude.length > 0) {
          for(var i=0; i< exclude.length; i++) {
            var newrow = tablebody.insertRow(0);
            var date_cell = newrow.insertCell(0);
            date_cell.className = "datetag";
            var sleep_cell = newrow.insertCell(1);
            sleep_cell.className = "sleeptag";
            var illness_cell = newrow.insertCell(2);
            illness_cell.className = "illnesstag"
            var injury_cell = newrow.insertCell(3);
            injury_cell.className = "injurytag";
            var phealth_cell = newrow.insertCell(4);
            phealth_cell = "percent_healthtag";
            var cycle_cell = newrow.insertCell(5);
            cycle_cell.className = "cycle_starttag";
            var RPE_cell = newrow.insertCell(6);
            RPE_cell.className = "RPEtag";
            var time_cell = newrow.insertCell(7);
            time_cell.className = "timetag";
            var dist_cell = newrow.insertCell(8);
            dist_cell.className = "distancetag";
            var notes_cell = newrow.insertCell(9);
            notes_cell.className = "notestag";
            var user_cell = newrow.insertCell(10);
            user_cell.className = "usertag";
            user_cell.style.display = "none";
            
            date_cell.innerHTML = exclude[i].cells[0].innerHTML;
            sleep_cell.innerHTML = exclude[i].cells[1].innerHTML;
            illness_cell.innerHTML = exclude[i].cells[2].innerHTML;
            injury_cell.innerHTML = exclude[i].cells[3].innerHTML;
            phealth_cell.innerHTML = exclude[i].cells[4].innerHTML;
            cycle_cell.innerHTML = exclude[i].cells[5].innerHTML;
            RPE_cell.innerHTML = exclude[i].cells[6].innerHTML;
            time_cell.innerHTML = exclude[i].cells[7].innerHTML;
            dist_cell.innerHTML = exclude[i].cells[8].innerHTML;
            notes_cell.innerHTML = exclude[i].cells[9].innerHTML;
            user_cell.innerHTML = exclude[i].cells[10].innerHTML;
          }
          
          exclude = [];
          
        }
        
        //populate exclude[]
        for(var i=0; i<tablerows.length; i++) {
          var t = tablerows[i].cells[10].innerHTML;
          if(currentuid != t) {
            exclude.push(tablerows[i]);
            }
          }
        
        //remove unwanted elements from training log table
        for(var i=0; i<exclude.length; i++) {
          for(var j=0; j<tablerows.length; j++) {
            var exclude_uid = exclude[i].cells[10].innerHTML;
            var row_uid = tablerows[j].cells[10].innerHTML;
            if(exclude_uid == row_uid) {
              tablerows[j].remove();
            }
          }
        }
        
           
       });
    style.
      .modal-body {
      background-color: #01579b;
      }
      .modal-header {
      background-color: #304ffe;
      }
      .modal-content {
      background-color: #01579b;
      }
      script.
       $(document).ready(function(){
       // the "href" attribute of .modal-trigger must specify the modal ID that   wants to be triggered
       $('.modal-trigger').leanModal();
    // Modal
    #editModal.modal
        .modal-content.teal.darken-3
          button.close(type='button',data-dismiss='modal',aria-lebel='Close')
            span(aria-hidden='true') x
          h4
            font(color='white') Weekly Charts:
          center
            .ez2
              br
              a.btn.btn-info.teal(href='#demo1', data-toggle='collapse') Sleep
              br
              br
              #demo1.collapse
                #sleepchart
                br
              a.btn.btn-info.teal(href='#demo2', data-toggle='collapse') Distance
              br
              br
              #demo2.collapse
                #distancechart
                br
              a.btn.btn-info.teal(href='#demo5', data-toggle='collapse') Accumulated Training Load
              br
              br
              #demo5.collapse
                #rpextimechart
                br
              a.btn.btn-info.teal(href='#demo6', data-toggle='collapse') Wellness
              br
              br
              #demo6.collapse
                #wellnesschart
                br
              br
    // Modal for Training log
    #editModal_tl.modal
        .modal-content.teal.darken-3
          button.close(type='button',data-dismiss='modal',aria-lebel='Close')
            span(aria-hidden='true') x
          h4
            font(color='white') Training Log:
          left
            .ez3
              - if (typeof(data) !== 'undefined'){  
                #tl_table
                  table.table2.table-bordered
                    thead
                      tr
                        th Date
                        th Hours Slept
                        th Illness
                        th Injury
                        th Percent Health
                        th Cycle
                        th RPE
                        th Time
                        th Distance
                        th Notes
                    tbody
                      for workout in data
                        tr
                          //this form holds the workout ID per workout as a hidden value, so if this workout should be deleted 
                          //or edited, we know which workout to update/remove.
                          form(name='tl_form', action='/coaches', method='post')
                            input(type='hidden', value=workout['wid'], name='wID', required='')
          
                            td.datetag= workout['date']
            
                            td.sleeptag= workout['sleep']
                            td.illnesstag= workout['health']
                            td.injurytag= workout['injury']
                            td.percent_healthtag= workout['percent_health']
                            td.cycle_starttag= workout['cycle_start']
                            td.RPEtag= workout['RPE']
                            td.timetag= workout['time']
                            td.distancetag= workout['distance']
                            td.notestag= workout['notes']
                            td(style='display:none;').usertag= workout['username']
                    -}
    // Materialize CSS imports [body]
    // put this at the end of the body
    // Import jQuery before materialize.js
    script(type='text/javascript', src='https://code.jquery.com/jquery-2.1.1.min.js')
    script(type='text/javascript', src='js/materialize.min.js')
