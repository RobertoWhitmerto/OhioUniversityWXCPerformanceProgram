doctype html
html
  head
    title PPA - Training Log
    // Compiled and minified CSS
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.96.0/css/materialize.min.css')
    // Compiled and minified JavaScript
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.96.0/js/materialize.min.js')

    // Bootstrap
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')


    // Import Google Icon Font
    link(href='https://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    // Import materialize.css
    link(type='text/css', rel='stylesheet', href='css/materialize.min.css', media='screen,projection')
    // Let browser know website is optimized for mobile

    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    // Load the AJAX API
    script(type='text/javascript', src='https://www.gstatic.com/charts/loader.js')
    script(type='text/javascript').
      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});
      // Set a callback to run when the Google Visualization API is loaded [A].
      google.charts.setOnLoadCallback(sleepy);
      google.charts.setOnLoadCallback(dist);
      google.charts.setOnLoadCallback(tload_time);
      google.charts.setOnLoadCallback(wellness);
      
      // The following 5 functions create and fill a chart with data based on the 
      // requested form by the client. They all utilize the data_w variable which
      // is passed in through the myworkouts route which contains all of the workout
      // information for that user. The date of each workout is then checked and either
      // displayed in the chart (most recent 7 days) or used to calculate acute:chronic
      // ratio (7, 28 days respectively) for the training load chart.
      // After this, two data points are drawn on the
      // chart, the value for that day's workout, and the value for the acute:chronic
      // ratio at that point in time.
      
      // ****************************** SLEEP CHART *************************************
      function sleepy() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'hours');

      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0],[oneWeekAgo_2.toString(),0],
                  [oneWeekAgo_3.toString(),0],[oneWeekAgo_4.toString(),0],
                  [oneWeekAgo_5.toString(),0],[oneWeekAgo_6.toString(),0],[oneWeekAgo_7.toString(),0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;

          if(true){
            var slot = Math.floor((dt - oneWeekAgo) / (1000*60*60*24));
            if(slot == 8){
              slot = 6;
            }
            
            if (slot >= 0 && slot <= 7 && !rows[slot][1])
              rows[slot][1] = parseFloat(obj.sleep, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          if(slot < 0)
            slot = slot * (-1);
          var rolling_total_chronic=0;
          var rolling_total_acute=0;
          var avg_count=0;
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            var chronic_dt = new Date(k);
            chronic_dt.setDate(chronic_dt.getDate() - 28);
            if(wrk_dt > chronic_dt && wrk_dt < k){
              rolling_total_chronic += parseFloat(wrk.sleep, 10);
              avg_count++;
            }
            var acute_dt = new Date(k);
            acute_dt.setDate(acute_dt.getDate() - 7);
            if(wrk_dt > acute_dt && wrk_dt < k){
              rolling_total_acute += parseFloat(wrk.sleep, 10);
            }
          }
          rolling_total_chronic /= 28;  
          rolling_total_acute /= 7;

          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          slot++;
      }
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Sleep Pattern',
      'width':700,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      hAxis: {
         title: "Date"
      },
      vAxis: {
      title: "Hours",
      viewWindowMode:'explicit'
      },
      colors: ['#006400','#32cd32']
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('sleepchart'));
      chart.draw(data, options);
      }
      
      //************************** DISTANCE CHART *********************************************
      function dist() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Distance (miles)');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0],[oneWeekAgo_2.toString(),0],
                  [oneWeekAgo_3.toString(),0],[oneWeekAgo_4.toString(),0],
                  [oneWeekAgo_5.toString(),0],[oneWeekAgo_6.toString(),0],[oneWeekAgo_7.toString(),0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;

          if(true){
            var slot = Math.floor((dt - oneWeekAgo) / (1000*60*60*24));
            if(slot == 8){
              slot = 6;
            }
            var rolling_total=0;
            var avg_count=0;
            
            rolling_total /= avg_count;
            if (slot >= 0 && slot <= 7 && !rows[slot][1])
              rows[slot][1] += parseFloat(obj.distance, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
        if(slot < 0)
          slot = slot * (-1);
        var rolling_total=0;
        var avg_count=0;
        for(var j = 0; j < d.length; j++){
          var wrk = d[j];
          var wrk_dt = new Date(Date.parse(wrk.date));
          if(wrk_dt > oneMonthAgo && wrk_dt < k){
            rolling_total += parseFloat(wrk.distance, 10);
            avg_count++;
          }
        }
        rolling_total /= 28;
        var k_day = new Date();
        k_day.setDate(k.getDate() + 1);
        rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
        slot++;
      }
      data.addRows(rows);
      // Set chart options
      var options = {
      'width':700,
      'height':200,
      hAxis: { title: 'Date'},
      vAxis: {
      title: "Miles",
      viewWindowMode:'explicit'
      },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400','#32cd32'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart2 = new google.visualization.LineChart(document.getElementById('distancechart'));
      chart2.draw(data, options);
      }
      //********************* tload_dist CHART ***********************************
      function tload_dist() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', '(RPE x Distance)');
      data.addColumn('number', 'Acute:Chronic Ratio');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
                  [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
                  [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;

          if(true){
            var slot = Math.floor((dt - oneWeekAgo) / (1000*60*60*24));
            if(slot == 8){
              slot = 6;
            }
            if (slot >= 0 && slot <= 7 && !rows[slot][1])
              rows[slot][1] += parseInt(obj.RPE, 10)*parseFloat(obj.distance, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          if(slot < 0)
            slot = slot * (-1);
          var rolling_total_chronic=0;
          var rolling_total_acute=0;
          var avg_count=0;
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            var chronic_dt = new Date(k);
            chronic_dt.setDate(chronic_dt.getDate() - 28);
            if(wrk_dt > chronic_dt && wrk_dt < k){
              rolling_total_chronic += parseInt(obj.RPE, 10)*parseFloat(obj.distance, 10);
              avg_count++;
            }
            var acute_dt = new Date(k);
            acute_dt.setDate(acute_dt.getDate() - 7);
            if(wrk_dt > acute_dt && wrk_dt < k){
              rolling_total_acute += parseInt(obj.RPE, 10)*parseFloat(obj.distance, 10);
            }
          }
          rolling_total_chronic /= 28;
          rolling_total_acute /= 7;
          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          rows[slot][2] = rolling_total_acute / rolling_total_chronic;
          slot++;
      }
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Training Load - Distance',
      'width':700,
      'height':200,
      seriesType: 'bars',
      series: {1: {type: 'line', targetAxisIndex:1}},
      vAxes: {0: {viewWindowMode:'explicit'},
              1: {gridlines: {color: 'transparent'}},
              },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400','#32cd32'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.ComboChart(document.getElementById('tload_distchart'));
      chart.draw(data, options);
      }
      
      // ************************* TRAINING LOAD TIME CHART ******************************************
      function tload_time() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Load');
      data.addColumn('number', 'Acute:Chronic Ratio');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0,100],[oneWeekAgo_2.toString(),0.0,100],
                  [oneWeekAgo_3.toString(),0.0,100],[oneWeekAgo_4.toString(),0.0,100],
                  [oneWeekAgo_5.toString(),0.0,100],[oneWeekAgo_6.toString(),0.0,100],[oneWeekAgo_7.toString(),0.0,100]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;

          if(true){
            var slot = Math.floor((dt - oneWeekAgo) / (1000*60*60*24));
            if(slot == 8){
              slot = 6;
            }
            if (slot >= 0 && slot <= 7 && !rows[slot][1])  
              rows[slot][1] += parseInt(obj.RPE, 10)*parseFloat(obj.time, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          if(slot < 0)
            slot = slot * (-1);
          var rolling_total_chronic=0;
          var rolling_total_acute=0;
          var avg_count_a=0;
          var avg_count_c=0;
          
          var acute_dt = new Date(k);
          acute_dt.setDate(acute_dt.getDate() - 7);
          var chronic_dt = new Date(k);
          chronic_dt.setDate(chronic_dt.getDate() - 28);
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            var k_plus_one = new Date(k);
            k_plus_one.setDate(k_plus_one.getDate() + 1);
            if(wrk_dt > chronic_dt && wrk_dt <= k_plus_one){
              rolling_total_chronic += parseInt(wrk.RPE, 10)*parseFloat(wrk.time, 10);
              avg_count_c++;
            }
            
            if(wrk_dt > acute_dt && wrk_dt <= k_plus_one){
              rolling_total_acute += parseInt(wrk.RPE, 10)*parseFloat(wrk.time, 10);
            }
          }
          rolling_total_chronic /= 28;
          rolling_total_acute /= 7;
          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          rows[slot][2] = rolling_total_acute / rolling_total_chronic;
          slot++;
      }
      data.addRows(rows);
      // Set chart options
      var options = {
      'width':700,
      'height':200,
      seriesType: 'bars',
      series: {1: {type: 'line', targetAxisIndex:1}},
      hAxis: {title: 'Date'},
      vAxes: {0: {viewWindowMode:'explicit', title: 'RPE x Mins'},
              1: {gridlines: {color: 'transparent'}, title: 'Acute:Chronic Workload'},
              },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400','#32cd32'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.ComboChart(document.getElementById('rpextimechart'));
      chart.draw(data, options);
      }
      
      //*********************** WELLNESS CHART *******************************
      function wellness() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Wellness score');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      var oneMonthAgo = new Date();
      oneMonthAgo.setDate(oneMonthAgo.getDate() - 28);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0],[oneWeekAgo_2.toString(),0],
                  [oneWeekAgo_3.toString(),0],[oneWeekAgo_4.toString(),0],
                  [oneWeekAgo_5.toString(),0],[oneWeekAgo_6.toString(),0],[oneWeekAgo_7.toString(),0]];
      
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          var dt = new Date(Date.parse(obj.date));
          var dt_fixed = dt.getDate() + 1;
          
          if(true){
            var slot = Math.floor((dt - oneWeekAgo) / (1000*60*60*24));
            if(slot == 8){
              slot = 6;
            }
            var rolling_total=0;
            var avg_count=0;
            
            rolling_total /= avg_count;

            if (slot >= 0 && slot <= 7 && !rows[slot][1])
              rows[slot][1] = parseInt(obj.percent_health, 10);
          }
      }
      var now = new Date();
      now.setDate(now.getDate() - 1);
      //loop through last week's dates to add rolling averages
      var slot = 0;
      for (var k = oneWeekAgo; k <= now; k.setDate(k.getDate() + 1)) {
          if(slot < 0)
            slot = slot * (-1);
          var rolling_total=0;
          var avg_count=0;
          for(var j = 0; j < d.length; j++){
            var wrk = d[j];
            var wrk_dt = new Date(Date.parse(wrk.date));
            if(wrk_dt > oneMonthAgo && wrk_dt < k){
              rolling_total += parseInt(wrk.percent_health, 10);
              avg_count++;
            }
          }

          rolling_total /= 28;
          var k_day = new Date();
          k_day.setDate(k.getDate() + 1);
          rows[slot][0] = (k_day.getMonth()+1).toString() + '/' + k_day.getDate().toString() + '/' + (k_day.getYear()-100);
          slot++;
      }

      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Wellness',
      'width':700,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      hAxis: {title: 'Date'},
      vAxis: {
      title: "% of Full Health",
      viewWindowMode:'explicit'
      },
      colors: ['#006400'],
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('wellnesschart'));
      chart.draw(data, options);
      }
      
    script.
      $(document).ready(function(){
      $(".dropdown-button").dropdown();
      $(".button-collapse").sideNav();
      });
  //Background pattern from Subtle Patterns//
  body(background='/views/bg3.png')
    include navi.pug
    br
    hr
    style(type='text/css').
      div.ez{
      background: #2f4f4f;
      width:900px;
      border: 3px solid #000000;
      margin: auto;
      }
    style(type='text/css').
      div.ez2{
      background: #b1f6cb;
      width:900px;
      border: 3px solid #000000;
      margin: auto;
      }
    style.
      .table {
      border: 3.5px solid #b1f6cb;
      border-radius: 5px;
      }
      .table-bordered > thead > tr > th,
      .table-bordered > tbody > tr > th,
      .table-bordered > tfoot > tr > th,
      .table-bordered > thead > tr > td,
      .table-bordered > tbody > tr > td,
      .table-bordered > tfoot > tr > td {
      border: 3px solid #b1f6cb;
      border-radius: 5px;
      }
      h1{
      color:white;
      }
      td{
      color:#b1f6cb;
      }
      th{
      color:#b1f6cb;
      }
    .ez
      font(color='cyan')
        center
          h1
            b Weekly Charts:
          p
    // Displaying the Weekly Charts
    // The following creates 5 drop down buttons which display the chart 
    // for the given data point.
    .ez2
      br
      a.btn.btn-info.teal(href='#demo1', data-toggle='collapse') Sleep
      br
      br
      #demo1.collapse
        #sleepchart
        br
      a.btn.btn-info.teal(href='#demo2', data-toggle='collapse') Distance
      br
      br
      #demo2.collapse
        #distancechart
        br
      a.btn.btn-info.teal(href='#demo5', data-toggle='collapse') Accumulated Training Load
      br
      br
      #demo5.collapse
        #rpextimechart
        br
      a.btn.btn-info.teal(href='#demo6', data-toggle='collapse') Wellness
      br
      br
      #demo6.collapse
        #wellnesschart
        br  
      br
      br
    br
    hr
         
    center
      .ez
        font(color='cyan')
          p.fonts
          // ****************************** DISPLAYING TRAINING LOG ******************************
          h1
            b Training Log:
          br
          //if the data coming in is empty or invalid, just don't display the table
          - if (typeof(data) !== 'undefined'){  
          table.table.table-bordered
            thead
              tr
                th Date
                th Hours Slept
                th Illness
                th Injury
                th Percent Health
                th Cycle
                th RPE
                th Time
                th Distance
                th Notes
                th
            tbody
              for workout in data
                tr
                  //this form holds the workout ID per workout as a hidden value, so if this workout should be deleted 
                  //or edited, we know which workout to update/remove.
                  form(name='form1', action='/myworkouts', method='post')
                    input(type='hidden', value=workout['wid'], name='wID', required='')

                    td.datetag= workout['date']
  
                    td.sleeptag= workout['sleep']
                    td.illnesstag= workout['health']
                    td.injurytag= workout['injury']
                    td.percent_healthtag= workout['percent_health']
                    td.cycle_starttag= workout['cycle_start']
                    td.RPEtag= workout['RPE']
                    td.timetag= workout['time']
                    td.distancetag= workout['distance']
                    td.notestag= workout['notes']
                    td
                      center
                        // Button trigger modal
                        // Modal Trigger
                        a.waves-effect.waves-light.btn.modal-trigger(href='#modal1', data-id=workout['wid'], data-id2=workout['sleep'], data-id3=workout['health'], data-id4=workout['injury'], data-id5=workout['percent_health'], data-id6=workout['cycle_start'], data-id7=workout['RPE'], data-id8=workout['time'], data-id9=workout['distance'], data-id10=workout['notes']) Edit
                        button.btn.waves-effect.waves-light.red.lighten-1(type='submit', name='action', wID=workout['wid'])
                          | Remove
                          i.material-icons.right send
          -}





    // Button trigger modal
    script.
      $(document).ready(function(){
      // the "href" attribute of .modal-trigger must specify the modal ID that   wants to be triggered
      $(document).on("click", ".modal-trigger", function (e) {
      
          e.preventDefault();
      
          var _self = $(this);
      
          var wID = _self.data('id');
          var sleep = _self.data('id2');
          var illness = _self.data('id3');
          var injury = _self.data('id4');
          var percent_health = _self.data('id5');
          var cycle_start = _self.data('id6');
          var RPE = _self.data('id7');
          var time = _self.data('id8');
          var distance = _self.data('id9');
          var notes = _self.data('id10');
          //$("#workoutID") = wID;
          $workoutID = wID;
          $sleep = sleep;
          $illness = illness;
          $injury = injury;
          $percent_health = percent_health;
          $cycle_start = cycle_start;
          $RPE = RPE;
          $time = time
          $distance = distance;
          $notes = notes;
          $('.modal-trigger').leanModal();
          //$(_self.attr('href')).modal('show');
      });
      });

// Modal Structure
#modal1.modal
  .modal-content.light-blue.darken-4
    h4 
      font(color='cyan') Edit Workout
    center
      a.waves-effect.waves-light.btn.light-green(onclick='myFunction()') Load Workout Data
    br
    br
    script.
      function myFunction() {
      var wID_ = $workoutID;
      var sleep = $sleep;
      var illness = $illness;
      var injury = $injury;
      var percent_health = $percent_health;
      var cycle_start = $cycle_start;
      var RPE = $RPE;
      var time = $time;
      var distance = $distance;
      var notes = $notes;

      //To Add the Links, assign dynamic value to these variables//
      var sleepV = sleep;           //Should read in the "number" value from original
      var illnessV =illness;    //String based selection, select input field
      var injuryV =injury;   //String based selection, select input field
      var perhealthV = percent_health;      //Should read in the number value from original
      var rpeinfoV ="interval"; //String based selection, select input field
      var rpevalV = RPE;         //Number based selection, select input field
      var timeV = time;           //Should read in the number value from original
      var distanceV = distance;       //Should read in the number value from original
      var hungryV = 10;         //Should read in the number value from original
      var cycleV = cycle_start;               //? This still isnt fixed from the roots
      var notesV = notes;
      console.log("notes field: " + notesV);
      //Autofill Hours of Sleep from Source//
      document.getElementById("sleephours").value =  sleep;
      //load in workout id (can't be edited)
      document.getElementById("wrk_id").value = wID_;
      //autofill notes
      document.getElementById("mynotes").value = notesV;
      //Autoselect General Health from Source//
      if(illnessV == "n/a")
      document.getElementById("illness").selectedIndex = 0;
      if(illnessV == "abnormal fatigue")
      document.getElementById("illness").selectedIndex = 1;
      if(illnessV == "decreased motivation")
      document.getElementById("illness").selectedIndex = 2;
      if(illnessV == "muscle soreness")
      document.getElementById("illness").selectedIndex = 3;
      if(illnessV == "fever")
      document.getElementById("illness").selectedIndex = 4;
      if(illnessV == "headache")
      document.getElementById("illness").selectedIndex = 5;
      if(illnessV == "chest congestion")
      document.getElementById("illness").selectedIndex = 6;
      if(illnessV == "upset stomach")
      document.getElementById("illness").selectedIndex = 7;
      if(illnessV == "insomnia")
      document.getElementById("illness").selectedIndex = 8;
      if(illnessV == "other")
      document.getElementById("illness").selectedIndex = 9;
      //--------------------------------------//
      //Autoselect Irritation/Pain from Source//
      if(injuryV == "n/a")
      document.getElementById("injury").selectedIndex = 0;
      if(injuryV == "foot")
      document.getElementById("injury").selectedIndex = 1;
      if(injuryV == "ankle")
      document.getElementById("injury").selectedIndex = 2;
      if(injuryV == "shin")
      document.getElementById("injury").selectedIndex = 3;
      if(injuryV == "calf")
      document.getElementById("injury").selectedIndex = 4;
      if(injuryV == "knee")
      document.getElementById("injury").selectedIndex = 5;
      if(injuryV == "thigh")
      document.getElementById("injury").selectedIndex = 6;
      if(injuryV == "hamstring")
      document.getElementById("injury").selectedIndex = 7;
      if(injuryV == "hip")
      document.getElementById("injury").selectedIndex = 8;
      if(injuryV == "pelvis")
      document.getElementById("injury").selectedIndex = 9;
      if(injuryV == "low back")
      document.getElementById("injury").selectedIndex = 10;
      if(injuryV == "mid back")
      document.getElementById("injury").selectedIndex = 11;
      if(injuryV == "upper back")
      document.getElementById("injury").selectedIndex = 12;
      if(injuryV == "shoulder")
      document.getElementById("injury").selectedIndex = 13;
      if(injuryV == "upper arm")
      document.getElementById("injury").selectedIndex = 14;
      if(injuryV == "elbow")
      document.getElementById("injury").selectedIndex = 15;
      if(injuryV == "wrist")
      document.getElementById("injury").selectedIndex = 16;
      if(injuryV == "hand")
      document.getElementById("injury").selectedIndex = 17;
      if(injuryV == "neck")
      document.getElementById("injury").selectedIndex = 18;
      if(injuryV == "head")
      //--------------------------------------//
      //Autofill Wellness Score//
      document.getElementById("percent_health").value = perhealthV;
      //Autoselect RPE Information from Source//
      if(rpeinfoV == "unknown")
      document.getElementById("rpeinfo").selectedIndex = 0;
      if(rpeinfoV == "aerobic")
      document.getElementById("rpeinfo").selectedIndex = 1;
      if(rpeinfoV == "sprint/interval")
      document.getElementById("rpeinfo").selectedIndex = 2;
      if(rpeinfoV == "resistance")
      document.getElementById("rpeinfo").selectedIndex = 3;
      if(rpeinfoV == "crosstraining")
      document.getElementById("rpeinfo").selectedIndex = 4;
      //--------------------------------------//
      //Autoselect RPE Value from Source//
      if(rpevalV == "rpeinvalid")
      document.getElementById("rpeval").selectedIndex = 0;
      if(rpevalV == 6)
      document.getElementById("rpeval").selectedIndex = 1;
      if(rpevalV == 7)
      document.getElementById("rpeval").selectedIndex = 2;
      if(rpevalV == 8)
      document.getElementById("rpeval").selectedIndex = 3;
      if(rpevalV == 9)
      document.getElementById("rpeval").selectedIndex = 4;
      if(rpevalV == 10)
      document.getElementById("rpeval").selectedIndex = 5;
      if(rpevalV == 11)
      document.getElementById("rpeval").selectedIndex = 6;
      if(rpevalV == 12)
      document.getElementById("rpeval").selectedIndex = 7;
      if(rpevalV == 13)
      document.getElementById("rpeval").selectedIndex = 8;
      if(rpevalV == 14)
      document.getElementById("rpeval").selectedIndex = 9;
      if(rpevalV == 15)
      document.getElementById("rpeval").selectedIndex = 10;
      if(rpevalV == 16)
      document.getElementById("rpeval").selectedIndex = 11;
      if(rpevalV == 17)
      document.getElementById("rpeval").selectedIndex = 12;
      if(rpevalV == 18)
      document.getElementById("rpeval").selectedIndex = 13;
      if(rpevalV == 19)
      document.getElementById("rpeval").selectedIndex = 14;
      if(rpevalV == 20)
      document.getElementById("rpeval").selectedIndex = 15;
      //--------------------------------------//
      //Autofill Time//
      document.getElementById("time").value = timeV;
      //Autofill Distance//
      document.getElementById("distance").value = distanceV;
      //Autoselect Hunger Score from Source//
      if(hungryV == "unknown")
      document.getElementById("hungry").selectedIndex = 0;
      if(hungryV == 0)
      document.getElementById("hungry").selectedIndex = 1;
      if(hungryV == 1)
      document.getElementById("hungry").selectedIndex = 2;
      if(hungryV == 2)
      document.getElementById("hungry").selectedIndex = 3;
      if(hungryV == 3)
      document.getElementById("hungry").selectedIndex = 4;
      if(hungryV == 4)
      document.getElementById("hungry").selectedIndex = 5;
      if(hungryV == 5)
      document.getElementById("hungry").selectedIndex = 6;
      if(hungryV == 6)
      document.getElementById("hungry").selectedIndex = 7;
      if(hungryV == 7)
      document.getElementById("hungry").selectedIndex = 8;
      if(hungryV == 8)
      document.getElementById("hungry").selectedIndex = 9;
      if(hungryV == 9)
      document.getElementById("hungry").selectedIndex = 10;
      if(hungryV == 10)
      document.getElementById("hungry").selectedIndex = 11;
      //--------------------------------------//
      }
    form(name='form2', action='/myworkouts_update', method='post')
      input#wrk_id(type='hidden', name='wrk_id', required='')
      label Hours of Sleep
      font(color='cyan')
        input#sleephours(type='number', name='sleep', min='0', max='14', step='any')
        br
      label General Health Status
      select#illness.browser-default(name='illness')
        option(name='illness', value='n/a') N/A
        option(name='illness', value='abnormal fatigue') Abnormal Fatigue
        option(name='illness', value='decreased motivation') Decreased Motivation
        option(name='illness', value='muscle soreness') Muscle Soreness
        option(name='illness', value='fever') Fever 
        option(name='illness', value='headache') Headache
        option(name='illness', value='chest congestion') Chest Congestion
        option(name='illness', value='upset stomach') Upset Stomach
        option(name='illness', value='insomnia') Insomnia
        option(name='illness', value='other') Other
      br
      label Location of Pain, Discomfort, or Irritation
      select#injury.browser-default(name='injury')
        option(name='injury', value='n/a') N/A
        option(name='injury', value='foot') Foot
        option(name='injury', value='ankle') Ankle
        option(name='injury', value='shin') Shin
        option(name='injury', value='calf') Calf
        option(name='injury', value='knee') Knee
        option(name='injury', value='thigh') Thigh
        option(name='injury', value='hamstring') Hamstring
        option(name='injury', value='hip') Hip
        option(name='injury', value='pelvis') Pelvis
        option(name='injury', value='low back') Low Back
        option(name='injury', value='mid back') Mid Back
        option(name='injury', value='upper back') Upper Back
        option(name='injury', value='shoulder') Shoulder
        option(name='injury', value='upper arm') Upper Arm
        option(name='injury', value='elbow') Elbow
        option(name='injury', value='wrist') Wrist
        option(name='injury', value='hand') Hand
        option(name='injury', value='neck') Neck
        option(name='injury', value='head') Head
      br
      label Perception of Wellness, Health, and Pain
      br
      label (100% = Healthy - Physically and Mentally Focused, 0% = Unable to Function or Exercise
      font(color='cyan')
        input#percent_health(name='percent_health', type='number', min='0', max='100', step='10')
        br
      label Workout Type
      select#rpeinfo.browser-default(name='rpeinfo')
        option(name='rpeinfo', value='unknown') ----
        option(name='rpeinfo', value='aerobic') Aerobic
        option(name='rpeinfo', value='sprint/interval') Sprint/Interval Training
        option(name='rpeinfo', value='resistance') Resistance Training
        option(name='rpeinfo', value='crosstraining') Cross Training
      br
      br
      label Rating of Perceived Exertion
      select#rpeval.browser-default(name='rpeval')
        option(name='rpeval', value='rpeinvalid') --
        option(name='rpeval', value='6') 6 - Rest
        option(name='rpeval', value='7') 7 - Extremely Light
        option(name='rpeval', value='8') 8 -
        option(name='rpeval', value='9') 9 - Very Light
        option(name='rpeval', value='10') 10 -
        option(name='rpeval', value='11') 11 - Light
        option(name='rpeval', value='12') 12 -
        option(name='rpeval', value='13') 13 - Somewhat Hard
        option(name='rpeval', value='14') 14 -
        option(name='rpeval', value='15') 15 - Hard
        option(name='rpeval', value='16') 16 -
        option(name='rpeval', value='17') 17 - Very Hard
        option(name='rpeval', value='18') 18 -
        option(name='rpeval', value='19') 19 - Extremely Hard
        option(name='rpeval', value='20') 20 - Maximal Exertion
      br
      br
      label Time of workout (minutes)
      font(color='cyan')
        input#time(name='time', type='number', min='0', max='999')
        br
        br
        label Distance (miles)
        input#distance(name='distance', type='number', min='0.0', max='100.0', step='any')
        br
        br
      label Perception of Hunger and Fullness Over 24-Hours
      select#hungry.browser-default(name='hungry')
        option(name='hungry', value='unknown') --
        option(name='hungry', value='0') 0 - No Appetite
        option(name='hungry', value='1') 1 - 
        option(name='hungry', value='2') 2 - 
        option(name='hungry', value='3') 3 - Below Normal Appetite
        option(name='hungry', value='4') 4 - 
        option(name='hungry', value='5') 5 - Normal Appetite
        option(name='hungry', value='6') 6 - 
        option(name='hungry', value='7') 7 - Above Normal Appetite
        option(name='hungry', value='8') 8 - 
        option(name='hungry', value='9') 9 - 
        option(name='hungry', value='10') 10 - Extremely High Appetite
      br
      label Start of cycle
      input#opt1.with-gap(name='cycle', type='radio', checked='', value='no')
      label#opta(name='cycle', for='opt1') No
      input#opt2.with-gap(name='cycle', type='radio', value='yes')
      label#optb(name='cycle', for='opt2') Yes
      br
      label Notes
      font(color='cyan')
        input#mynotes(name='mynotes', type='text')
        br
      br
      br
      button.modal-action.modal-close.btn-flat.red(type='button', href='#!')
        font(color='white') Close
      button.btn.blue.btn-primary(type='submit', name='action', wID)
        | Update
        i.material-icons.right send

    // Materialize CSS imports [body]
    // put this at the end of the body
    // Import jQuery before materialize.js
    script(type='text/javascript', src='https://code.jquery.com/jquery-2.1.1.min.js')
    script(type='text/javascript', src='js/materialize.min.js')
