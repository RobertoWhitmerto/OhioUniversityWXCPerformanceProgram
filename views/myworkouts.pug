doctype html
html
  head
    title PPA - Training Log
    script(type='text/javascript', src='http://code.jquery.com/jquery-1.8.3.min.js')
    script(type='text/javascript', src='script.js')

    // Compiled and minified CSS
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.min.css')
    // Compiled and minified JavaScript
    script(src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.min.js')
    // Bootstrap
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js')
    // Let browser know website is optimized for mobile
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    // Import Google Icon Font
    link(href='http://fonts.googleapis.com/icon?family=Material+Icons', rel='stylesheet')
    // Import materialize.css
    link(type='text/css', rel='stylesheet', href='css/materialize.min.css', media='screen,projection')
    // Let browser know website is optimized for mobile
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js')
    // Load the AJAX API
    script(type='text/javascript', src='https://www.gstatic.com/charts/loader.js')
    script(type='text/javascript').
      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});
      // Set a callback to run when the Google Visualization API is loaded [A].
      google.charts.setOnLoadCallback(sleepy);
      google.charts.setOnLoadCallback(dist);
      google.charts.setOnLoadCallback(tload_dist);
      google.charts.setOnLoadCallback(tload_time);
      google.charts.setOnLoadCallback(wellness);
      //Identifying Functions [B]
      
      // ****************************** SLEEP CHART *************************************
      function sleepy() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'hours');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      console.log(oneWeekAgo);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],[oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],[oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      console.log(JSON.stringify(d));
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          console.log("DATE: ");
          //console.log(obj.date);
          var dt = new Date(Date.parse(obj.date));
          //console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            console.log(slot);
            console.log(dt.getDate() + 1);
            var dt_fixed = dt.getDate() + 1;
            rows[slot][0] = dt_fixed.toString();
            rows[slot][1] = parseInt(obj.sleep, 10);
            //rows[dt.getDay()][1] = parseInt(obj.sleep, 10);
          }
      }
      console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Sleep Pattern',
      'width':700,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      vAxis: {
      title: "Hours of Sleep",
      viewWindowMode:'explicit'
      },
      colors: ['#006400'],
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('sleepchart'));
      chart.draw(data, options);
      }
      
      //************************** DISTANCE CHART *********************************************
      function dist() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Distance (miles)');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      console.log(oneWeekAgo);
      var d = !{data_w};
      
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],[oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],[oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      
      console.log(JSON.stringify(d));
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          console.log("DATE: ");
          console.log(obj.date);
          var dt = new Date(Date.parse(obj.date));
          console.log(dt+1);
          console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            console.log(slot);
            console.log(dt.getDate() + 1);
            var dt_fixed = dt.getDate() + 1;
            rows[slot][0] = dt_fixed.toString();
            rows[slot][1] += parseInt(obj.distance, 10);
            //rows[dt.getDay()][1] = parseInt(obj.distance, 10);
          }
      }
      console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Distance Ran',
      'width':700,
      'height':200,
      vAxis: {
      title: "Distance",
      viewWindowMode:'explicit'
      },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart2 = new google.visualization.LineChart(document.getElementById('distancechart'));
      chart2.draw(data, options);
      }
      //********************* tload_dist CHART ***********************************
      function tload_dist() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', '(RPE x Distance)');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      console.log(oneWeekAgo);
      var d = !{data_w};
      
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],[oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],[oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
      //var rows = [['Sun.',0.0],['Mon.',0.0],['Tues.',0.0],['Wed.',0.0],['Th.',0.0],['Fri.',0.0],['Sat.',0.0]];
      console.log(JSON.stringify(d));
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          console.log("DATE: ");
          console.log(obj.date);
          var dt = new Date(Date.parse(obj.date));
          console.log(dt+1);
          console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            console.log(slot);
            console.log(dt.getDate() + 1);
            var dt_fixed = dt.getDate() + 1;
            rows[slot][0] = dt_fixed.toString();
            rows[slot][1] = parseInt(obj.RPE, 10)*parseInt(obj.distance, 10);
            //rows[dt.getDay()][1] = parseFloat(obj.time, 10)/parseInt(obj.distance, 10);
          }
      }
      console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Training Load - Distance',
      'width':700,
      'height':200,
      vAxis: {
      title: "Load",
      viewWindowMode:'explicit'
      },
      legend: 'none',
      lineWidth: 3,
      colors: ['#006400'],
      backgroundColor: '#ffffff'
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('tload_distchart'));
      chart.draw(data, options);
      }
      
      // ************************* TRAINING LOAD TIME CHART ******************************************
      function tload_time() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Load');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      console.log(oneWeekAgo);
      var d = !{data_w};
      var oneWeekAgo_1 = new Date();
      oneWeekAgo_1.setDate(oneWeekAgo + 1);
      var oneWeekAgo_2 = new Date();
      oneWeekAgo_2.setDate(oneWeekAgo + 2);
      var oneWeekAgo_3 = new Date();
      oneWeekAgo_3.setDate(oneWeekAgo + 3);
      var oneWeekAgo_4 = new Date();
      oneWeekAgo_4.setDate(oneWeekAgo + 4);
      var oneWeekAgo_5 = new Date();
      oneWeekAgo_5.setDate(oneWeekAgo + 5);
      var oneWeekAgo_6 = new Date();
      oneWeekAgo_6.setDate(oneWeekAgo + 6);
      var oneWeekAgo_7 = new Date();
      oneWeekAgo_7.setDate(oneWeekAgo + 7);
      
      var rows = [[oneWeekAgo_1.toString(),0],[oneWeekAgo_2.toString(),0],[oneWeekAgo_3.toString(),0],[oneWeekAgo_4.toString(),0],[oneWeekAgo_5.toString(),0],[oneWeekAgo_6.toString(),0],[oneWeekAgo_7.toString(),0]];
      var count = [0,0,0,0,0,0,0];
      //console.log(JSON.stringify(d));
      for(var i = 0; i < d.length; i++) {
          var obj = d[i];
          console.log("DATE: ");
          console.log(obj.date);
          var dt = new Date(Date.parse(obj.date));
          console.log(dt.getDate());
          console.log(oneWeekAgo);
          if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            console.log(slot);
            console.log(dt.getDate() + 1);
            var dt_fixed = dt.getDate() + 1;
            rows[slot][0] = dt_fixed.toString();
            rows[slot][1] += parseInt(obj.RPE, 10)*parseInt(obj.time, 10);
            count[slot]++;
          }
      }
      //need to wait to talk to client about this calculation
      for(var i = 0; i <= 7; i++) {
        if (typeof rows[i] != 'undefined'){
          ; //rows[i][1] /= count[i];
        }
      }
      console.log(rows);
      console.log(count);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Training Load - Time',
      'width':700,
      'height':200,
      legend: 'none',
      backgroundColor: '#ffffff',
      vAxis: {
      title: "RPE x Time",
      viewWindowMode:'explicit'
      },
      colors: ['#006400'],
      lineWidth: 3,
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('rpextimechart'));
      chart.draw(data, options);
      }
      
      //*********************** WELLNESS CHART *******************************
      function wellness() {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'day');
      data.addColumn('number', 'Wellness score');
      var oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
      console.log(oneWeekAgo);
      var d = !{data_w};
      
      if(Object.keys(d).length > 0){
      
        var oneWeekAgo_1 = new Date();
        oneWeekAgo_1.setDate(oneWeekAgo + 1);
        var oneWeekAgo_2 = new Date();
        oneWeekAgo_2.setDate(oneWeekAgo + 1);
        var oneWeekAgo_3 = new Date();
        oneWeekAgo_3.setDate(oneWeekAgo + 1);
        var oneWeekAgo_4 = new Date();
        oneWeekAgo_4.setDate(oneWeekAgo + 1);
        var oneWeekAgo_5 = new Date();
        oneWeekAgo_5.setDate(oneWeekAgo + 1);
        var oneWeekAgo_6 = new Date();
        oneWeekAgo_6.setDate(oneWeekAgo + 1);
        var oneWeekAgo_7 = new Date();
        oneWeekAgo_7.setDate(oneWeekAgo + 1);
        
        var rows = [[oneWeekAgo_1.toString(),0.0],[oneWeekAgo_2.toString(),0.0],[oneWeekAgo_3.toString(),0.0],[oneWeekAgo_4.toString(),0.0],[oneWeekAgo_5.toString(),0.0],[oneWeekAgo_6.toString(),0.0],[oneWeekAgo_7.toString(),0.0]];
        //console.log(JSON.stringify(d));
        for(var i = 0; i < d.length; i++) {
            var obj = d[i];
            //console.log("DATE: ");
            //console.log(obj.date);
            var dt = new Date(Date.parse(obj.date));
            //console.log(dt+1);
            //console.log(oneWeekAgo);
            if(dt >= oneWeekAgo){
            var slot = dt.getDate() - oneWeekAgo.getDate();
            if(slot < 0)
              slot = slot * (-1);
            console.log(slot);
            console.log(dt.getDate() + 1);
            var dt_fixed = dt.getDate() + 1;
              rows[slot][0] = dt_fixed.toString();
              rows[slot][1] = parseInt(obj.percent_health, 10);
              //rows[dt.getDay()][1] = parseInt(obj.sleep, 10);
            }
        }
      }
      else{
        var dt = new Date();
        dt.setDate(dt.getDate());
        var rows = [["No workouts this week", 0]];
      }
      console.log("ROWS");
      console.log(rows);
      data.addRows(rows);
      // Set chart options
      var options = {'title':'Weekly Wellness',
      'width':700,
      'height':200,
      legend: 'none',
      lineWidth: 3,
      backgroundColor: '#ffffff',
      vAxis: {
      title: "Wellness %",
      viewWindowMode:'explicit'
      },
      colors: ['#006400'],
      };
      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.LineChart(document.getElementById('wellnesschart'));
      chart.draw(data, options);
      }
      
    script.
      $(document).ready(function(){
      $(".dropdown-button").dropdown();
      $(".button-collapse").sideNav();
      });
  body(background='/views/bg3.jpg')
    // Navbar up at the top
    nav
      .nav-wrapper.light-blue.darken-4
        a.brand-logo
          font(color='cyan') PPA
        a.button-collapse(href='#', data-activates='mobile-demo')
          i.material-icons menu
        ul.right.hide-on-med-and-down
          li
            a.dropdown-button.green.lighten-1(href='#', data-activates='Athletes')
              | Athletes
              i.material-icons.right arrow_drop_down
          li
            a.dropdown-button.blue.lighten-1(href='#', data-activates='CoachesTrainers')
              | Coaches/Trainers
              i.material-icons.right arrow_drop_down
          li
            a.dropdown-button.red.lighten-1(href='#', data-activates='Administrators')
              | Administrators
              i.material-icons.right arrow_drop_down
          li
            a.dropdown-button.red.accent-4(href='#', data-activates='Helpbar')
              | Need Help?
              i.material-icons.right arrow_drop_down
          li
            a.waves-effect.waves-light.btn-large.orange(href='/logout') Log-out
      // Drop down associations Non-Mobile
      ul#Athletes.dropdown-content
        li
          a(href='/workoutentry') New Workout
        li.divider
        li
          a(href='/myworkouts') Training Log
      ul#CoachesTrainers.dropdown-content
        li
          a(href='/coaches') View Athletes
      ul#Administrators.dropdown-content
        li
          a(href='/datadumpindividual') CSV Data Dump (Individual)
        li.divider
        li
          a(href='/datadumpteam') CSV Data Dump (Team)
        li.divider
        li
          a(href='/admin_add_user') Add a user
        li.divider
        li
          a(href='/admin_remove_user') Remove a user
      ul#Helpbar.dropdown-content
        li
          a(href='/about') About
        li
          a(href='/changepassword') Change password
        li
          a(href='/buggy') Submit a bug
      // Hambug Menu Options
      ul#mobile-demo.side-nav.amber.lighten-5
        li
          font(color='green')
            h5 Athletes
        li.divider
        li
          a.waves-effect.waves-light.btn.green.darken-3(href='/workoutentry') New Workout
        li.divider
        li
          a.waves-effect.waves-light.btn.green.darken-3(href='/myworkouts') Training Log
        li.divider
        li
          font(color='blue')
            h5 Trainers
        li.divider
        li
          a.waves-effect.waves-light.btn-large.blue.darken-3(href='/coaches') View Athletes
        li.divider
        li
          font(color='red')
            h5 Administrators
        li.divider
        li
          a.waves-effect.waves-light.btn.red.darken-3(href='/datadumpindividual') CSV Data Dump (Individual)
        li
          a.waves-effect.waves-light.btn.red.darken-3(href='/datadumpteam') CSV Data Dump (Team)
        li.divider
        li
          a.waves-effect.waves-light.btn.red.darken-3(href='/admin_add_user') Add a User
        li.divider
        li
          a.waves-effect.waves-light.btn.red.darken-3(href='/admin_remove_user') Remove a User
        li.divider
        li
          br
        li.divider
        li
          a.waves-effect.waves-light.btn.blue-grey.darken-3(href='/about') About
        li.divider
        li
          a.waves-effect.waves-light.btn.blue-grey.darken-3(href='/changepassword') Change password
        li.divider
        li
          a.waves-effect.waves-light.btn.blue-grey.darken-3(href='/buggy') Submit a bug
        li.divider
        li
          a.waves-effect.waves-light.btn-large.orange(href='/logout') Log-out
        li.divider
        li
          font(color='grey')
            h6
              center Team on a Cob 2016
    br
    hr
    style(type='text/css').
      div.ez{
      background: #01579b;
      width:900px;
      border: 3px solid #82b1ff;
      margin: auto;
      }
    style(type='text/css').
      div.ez2{
      background: #304ffe;
      width:900px;
      border: 3px solid #82b1ff;
      margin: auto;
      }
    style.
      .table {
      border: 3.5px solid #03a9f4;
      border-radius: 5px;
      }
      .table-bordered > thead > tr > th,
      .table-bordered > tbody > tr > th,
      .table-bordered > tfoot > tr > th,
      .table-bordered > thead > tr > td,
      .table-bordered > tbody > tr > td,
      .table-bordered > tfoot > tr > td {
      border: 3px solid #03a9f4;
      border-radius: 5px;
      }
      h1{
      color:white;
      }
      td{
      color:#18ffff;
      }
      th{
      color:white;
      }
    .ez
      font(color='cyan')
        center
          h1
            b Weekly Charts:
          p
    // Div that will hold the pie chart [C]
    .ez2
      br
      a.btn.btn-info.green(href='#demo1', data-toggle='collapse') Sleep
      br
      br
      #demo1.collapse
        #sleepchart
        br
      a.btn.btn-info.green(href='#demo2', data-toggle='collapse') Distance
      br
      br
      #demo2.collapse
        #distancechart
      a.btn.btn-info.green(href='#demo3', data-toggle='collapse') Training Load - Distance
      br
      br
      #demo3.collapse
        #tload_distchart
        br
      a.btn.btn-info.green(href='#demo5', data-toggle='collapse') Training Load - Time
      br
      br
      #demo5.collapse
        #rpextimechart
        br
      a.btn.btn-info.green(href='#demo6', data-toggle='collapse') Wellness
      br
      br
      #demo6.collapse
        #wellnesschart
        br  
      br
      br
    br
    hr
    // END OF CHARTS 

         
    center
      .ez
        font(color='cyan')
          p.fonts
          // ****************************** DISPLAYING TRAINING LOG ******************************
          h1
            b Training Log:
          br
          - if (typeof(data) !== 'undefined'){  
          table.table.table-bordered
            thead
              tr
                th Date
                th Hours Slept
                th Illness
                th Injury
                th Percent Health
                th Cycle
                th RPE
                th Time
                th Distance
                th Notes
                th
            tbody
              for workout in data
                tr
                  form(action='/myworkouts', method='post')
                    input(type='hidden', value=workout['workout_id'], name='wID', required='')

                    td.datetag= workout['date']
  
                    td.sleeptag= workout['sleep']
                    td.illnesstag= workout['Illness']
                    td.injurytag= workout['Injury']
                    td.percent_healthtag= workout['percent_health']
                    td.cycle_starttag= workout['cycle_start']
                    td.RPEtag= workout['RPE']
                    td.timetag= workout['time']
                    td.distancetag= workout['distance']
                    td.notestag= workout['notes']
                    td
                      center
                        // Button trigger modal
                        button.btn.cyan.btn-primary.btn-lg(type='button', data-toggle='modal', data-target='#editModal')
                          | Edit
                        button.btn.waves-effect.waves-light.red.lighten-1(type='submit', name='action', wID=workout['workout_id'])
                          | Remove
                          i.material-icons.right send
          -}





    // Button trigger modal
    button.btn.cyan.btn-primary.btn-lg(type='button', data-toggle='modal', data-target='#editModal')
      | Edit
    style.
      .modal-body {
      background-color: #01579b;
      }
      .modal-header {
      background-color: #304ffe;
      }
      .modal-content {
      background-color: #01579b;
      }
    // Modal
    #editModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='myModalLabel')
      .modal-dialog(role='document')
        .modal-content
          .modal-header
            button.close(type='button', data-dismiss='modal', aria-label='Close')
              span(aria-hidden='true') ×
            h4#myModalLabel.modal-title
              center
                font(color='cyan') Edit Workout:
          .modal-body
            br
            center
              a.waves-effect.waves-light.btn.light-green(onclick='myFunction()') Load Workout Data
            br
            br
            script.
              function myFunction() {
              //To Add the Links, assign dynamic value to these variables//
              var sleepV = 5;           //Should read in the "number" value from original
              var illnessV ="fever";    //String based selection, select input field
              var injuryV ="it band";   //String based selection, select input field
              var perhealthV = 70;      //Should read in the number value from original
              var rpeinfoV ="interval"; //String based selection, select input field
              var rpevalV = 18;         //Number based selection, select input field
              var timeV = 20;           //Should read in the number value from original
              var distanceV = 25;       //Should read in the number value from original
              var hungryV = 10;         //Should read in the number value from original
              var cycleV;               //? This still isnt fixed from the roots
              //Autofill Hours of Sleep from Source//
              document.getElementById("sleephours").value = sleepV;
              //Autoselect General Health from Source//
              if(illnessV == "n/a")
              document.getElementById("illness").selectedIndex = 0;
              if(illnessV == "fever")
              document.getElementById("illness").selectedIndex = 1;
              if(illnessV == "gi_distress")
              document.getElementById("illness").selectedIndex = 2;
              if(illnessV == "upper respiratory")
              document.getElementById("illness").selectedIndex = 3;
              if(illnessV == "abnormal fatigue")
              document.getElementById("illness").selectedIndex = 4;
              if(illnessV == "insomnia")
              document.getElementById("illness").selectedIndex = 5;
              if(illnessV == "irritability")
              document.getElementById("illness").selectedIndex = 6;
              if(illnessV == "decreased motivation")
              document.getElementById("illness").selectedIndex = 7;
              if(illnessV == "weight loss")
              document.getElementById("illness").selectedIndex = 8;
              if(illnessV == "chronic soreness")
              document.getElementById("illness").selectedIndex = 9;
              //--------------------------------------//
              //Autoselect Irritation/Pain from Source//
              if(injuryV == "n/a")
              document.getElementById("injury").selectedIndex = 0;
              if(injuryV == "foot arch")
              document.getElementById("injury").selectedIndex = 1;
              if(injuryV == "Heel")
              document.getElementById("injury").selectedIndex = 2;
              if(injuryV == "shin")
              document.getElementById("injury").selectedIndex = 3;
              if(injuryV == "knee")
              document.getElementById("injury").selectedIndex = 4;
              if(injuryV == "it band")
              document.getElementById("injury").selectedIndex = 5;
              if(injuryV == "hip")
              document.getElementById("injury").selectedIndex = 6;
              if(injuryV == "low back")
              document.getElementById("injury").selectedIndex = 7;
              if(injuryV == "pelvis")
              document.getElementById("injury").selectedIndex = 8;
              if(injuryV == "rib")
              document.getElementById("injury").selectedIndex = 9;
              //--------------------------------------//
              //Autofill Wellness Score//
              document.getElementById("percent_health").value = perhealthV;
              //Autoselect RPE Information from Source//
              if(rpeinfoV == "unknown")
              document.getElementById("rpeinfo").selectedIndex = 0;
              if(rpeinfoV == "aerobic")
              document.getElementById("rpeinfo").selectedIndex = 1;
              if(rpeinfoV == "threshold")
              document.getElementById("rpeinfo").selectedIndex = 2;
              if(rpeinfoV == "interval")
              document.getElementById("rpeinfo").selectedIndex = 3;
              if(rpeinfoV == "crosstraining")
              document.getElementById("rpeinfo").selectedIndex = 4;
              if(rpeinfoV == "strengthandconditioning")
              document.getElementById("rpeinfo").selectedIndex = 5;
              //--------------------------------------//
              //Autoselect RPE Value from Source//
              if(rpevalV == "rpeinvalid")
              document.getElementById("rpeval").selectedIndex = 0;
              if(rpevalV == 6)
              document.getElementById("rpeval").selectedIndex = 1;
              if(rpevalV == 7)
              document.getElementById("rpeval").selectedIndex = 2;
              if(rpevalV == 8)
              document.getElementById("rpeval").selectedIndex = 3;
              if(rpevalV == 9)
              document.getElementById("rpeval").selectedIndex = 4;
              if(rpevalV == 10)
              document.getElementById("rpeval").selectedIndex = 5;
              if(rpevalV == 11)
              document.getElementById("rpeval").selectedIndex = 6;
              if(rpevalV == 12)
              document.getElementById("rpeval").selectedIndex = 7;
              if(rpevalV == 13)
              document.getElementById("rpeval").selectedIndex = 8;
              if(rpevalV == 14)
              document.getElementById("rpeval").selectedIndex = 9;
              if(rpevalV == 15)
              document.getElementById("rpeval").selectedIndex = 10;
              if(rpevalV == 16)
              document.getElementById("rpeval").selectedIndex = 11;
              if(rpevalV == 17)
              document.getElementById("rpeval").selectedIndex = 12;
              if(rpevalV == 18)
              document.getElementById("rpeval").selectedIndex = 13;
              if(rpevalV == 19)
              document.getElementById("rpeval").selectedIndex = 14;
              if(rpevalV == 20)
              document.getElementById("rpeval").selectedIndex = 15;
              //--------------------------------------//
              //Autofill Time//
              document.getElementById("time").value = timeV;
              //Autofill Distance//
              document.getElementById("distance").value = distanceV;
              //Autoselect Hunger Score from Source//
              if(hungryV == "unknown")
              document.getElementById("hungry").selectedIndex = 0;
              if(hungryV == 0)
              document.getElementById("hungry").selectedIndex = 1;
              if(hungryV == 1)
              document.getElementById("hungry").selectedIndex = 2;
              if(hungryV == 2)
              document.getElementById("hungry").selectedIndex = 3;
              if(hungryV == 3)
              document.getElementById("hungry").selectedIndex = 4;
              if(hungryV == 4)
              document.getElementById("hungry").selectedIndex = 5;
              if(hungryV == 5)
              document.getElementById("hungry").selectedIndex = 6;
              if(hungryV == 6)
              document.getElementById("hungry").selectedIndex = 7;
              if(hungryV == 7)
              document.getElementById("hungry").selectedIndex = 8;
              if(hungryV == 8)
              document.getElementById("hungry").selectedIndex = 9;
              if(hungryV == 9)
              document.getElementById("hungry").selectedIndex = 10;
              if(hungryV == 10)
              document.getElementById("hungry").selectedIndex = 11;
              //--------------------------------------//
              }
            form
              label Hours of Sleep
              font(color='cyan')
                input#sleephours(type='number', name='sleephours', min='0', max='14')
              br
              label General Health
              select#illness.browser-default(name='illness')
                option(name='illness', value='n/a') N/A
                option(name='illness', value='fever') Fever
                option(name='illness', value='gi_distress') GI Distress
                option(name='illness', value='upper respiratory') Upper Respiratory
                option(name='illness', value='abnormal fatigue') Abnormal Fatigue
                option(name='illness', value='insomnia') Insomnia
                option(name='illness', value='irritability') Irritability
                option(name='illness', value='decreased motivation') Decreased Motivation
                option(name='illness', value='weight loss') Weight Loss
                option(name='illness', value='chronic soreness') Chronic Soreness
              br
              label Irritation/Pain
              select#injury.browser-default(name='injury')
                option(name='injury', value='n/a') N/A
                option(name='injury', value='foot arch') Foot Arch
                option(name='injury', value='Heel') Heel
                option(name='injury', value='shin') Shin
                option(name='injury', value='knee') Knee
                option(name='injury', value='it band') IT Band
                option(name='injury', value='hip') Hip
                option(name='injury', value='low back') Low Back
                option(name='injury', value='pelvis') Pelvis
                option(name='injury', value='rib') Rib
              br
              label Wellness Score
              br
              font(color='cyan')
                label (100% = Full Health, 0% = Not able to Workout
                input#percent_health(name='percent_health', type='number', min='0', max='100', step='10')
                br
              label RPE Information
              select#rpeinfo.browser-default(name='rpeinfo')
                option(name='rpeinfo', value='unknown') ----
                option(name='rpeinfo', value='aerobic') Zone 1: Aerobic
                option(name='rpeinfo', value='threshold') Zone 2: Threshold
                option(name='rpeinfo', value='interval') Zone 3: Interval
                option(name='rpeinfo', value='crosstraining') Cross Training
                option(name='rpeinfo', value='strengthandconditioning') Strength and Conditioning
              br
              br
              label RPE (6-20)
              select#rpeval.browser-default(name='rpeval')
                option(name='rpeval', value='rpeinvalid') --
                option(name='rpeval', value='6') 6 - Rest
                option(name='rpeval', value='7') 7 - Extremely Light
                option(name='rpeval', value='8') 8 -
                option(name='rpeval', value='9') 9 - Very Light
                option(name='rpeval', value='10') 10 -
                option(name='rpeval', value='11') 11 - Light
                option(name='rpeval', value='12') 12 -
                option(name='rpeval', value='13') 13 - Somewhat Hard
                option(name='rpeval', value='14') 14 -
                option(name='rpeval', value='15') 15 - Hard
                option(name='rpeval', value='16') 16 -
                option(name='rpeval', value='17') 17 - Very Hard
                option(name='rpeval', value='18') 18 -
                option(name='rpeval', value='19') 19 - Extremely Hard
                option(name='rpeval', value='20') 20 - Maximal Exertion
              br
              br
              font(color='cyan')
                label Time of workout (minutes)
                input#time(name='time', type='number', min='0', max='999')
                br
                br
                label Distance (miles)
                input#distance(name='distance', type='number', min='0.0', max='100.0')
                br
                br
              label 24-hour Hunger Score
              select#hungry.browser-default(name='hungry')
                option(name='hungry', value='unknown') --
                option(name='hungry', value='0') 0 - Empty
                option(name='hungry', value='1') 1 - Ravenous
                option(name='hungry', value='2') 2 - Very Hungry
                option(name='hungry', value='3') 3 - Lightly Hungry
                option(name='hungry', value='4') 4 - Lightly Hungry
                option(name='hungry', value='5') 5 - Neutral
                option(name='hungry', value='6') 6 - Lightly Full; Satisfied
                option(name='hungry', value='7') 7 - Lightly Full; Satisfied
                option(name='hungry', value='8') 8 - Full
                option(name='hungry', value='9') 9 - Stuffed
                option(name='hungry', value='10') 10 - Sick
              br
              label Start of cycle
              input#opt1.with-gap(name='cycle', type='radio', checked='', value='no')
              label#opta(name='cycle', for='opt1') No
              input#opt2.with-gap(name='cycle', type='radio', value='yes')
              label#optb(name='cycle', for='opt2') Yes
              br
              br
              button.btn.red.btn-default(type='button', data-dismiss='modal') Close
              button.btn.blue.btn-primary(type='button') Update








    br
    br
    br
    hr
    // Materialize CSS imports [body]
    // put this at the end of the body
    // Import jQuery before materialize.js
    script(type='text/javascript', src='https://code.jquery.com/jquery-2.1.1.min.js')
    script(type='text/javascript', src='js/materialize.min.js')
